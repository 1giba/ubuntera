
.PHONY: help

# Shell that make should use
# Make changes to path persistent
# https://stackoverflow.com/a/13468229/13577666
SHELL := /bin/bash
PATH := $(PATH)

# Ubuntu distro string
OS_VERSION_NAME := $(shell lsb_release -cs)

HOSTNAME = $(shell hostname)

# This next section is needed to ensure $$HOME is on PATH in the initial shell session
# The file from bash scripts/before_script_path_fix.sh
# is only loaded in a new shell session.
LOCAL_BIN = $(shell echo $$HOME/.local/bin)
# $(warning LOCAL_BIN is $(LOCAL_BIN))

# Source for conditional: https://stackoverflow.com/a/2741747/13577666
ifneq (,$(findstring $(LOCAL_BIN),$(PATH)))
	# Found: all set; do nothing, $(LOCAL_BIN) is on PATH
	PATH := $(PATH);
else
	# Not found: adding $(LOCAL_BIN) to PATH for this shell session
export PATH := $(LOCAL_BIN):$(PATH); @echo $(PATH)
endif

# "users" format is from https://github.com/icancclearynow/ansible-role-zsh
VARIABLES = '{"users": [{"username": "$(shell whoami)"}], "ansible_user": "$(shell whoami)", "docker_users": ["$(shell whoami)"]}'

# Main Ansible Playbook Command (prompts for password)
PLAYBOOK=playbook.yml
ANSIBLE_PLAYBOOK = ansible-playbook $(PLAYBOOK) -v -e $(VARIABLES)

ANSIBLE = $(ANSIBLE_PLAYBOOK) --ask-become-pass

# - to suppress if it doesn't exist
-include make.env

$(warning ANSIBLE is $(ANSIBLE))

help:
# http://marmelab.com/blog/2016/02/29/auto-documented-makefile.html
# adds anything that has a double # comment to the phony help list
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ".:*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

.DEFAULT_GOAL := help

bootstrap-before-install:
bootstrap-before-install:
	# Apt Dependencies (removes apt ansible)
	bash scripts/before_install_apt_dependencies.sh

bootstrap-install:
bootstrap-install:
	# Install ansible
	bash scripts/install.sh

bootstrap-before-script:
bootstrap-before-script:
	# Ensure "$$HOME/.local/bin" is part of PATH on future shell sessions
	# The top of the Makefile takes care of this in the initial session
	bash scripts/before_script_path_fix.sh

bootstrap: bootstrap-before-install bootstrap-install bootstrap-before-script
bootstrap: ## Installs dependencies needed to run playbook

bootstrap-check:
bootstrap-check: ## Check that PATH and requirements are correct
	@ansible --version | grep "python version"

check: DARGS?=
check: ## Checks personal-computer.yml playbook
	@$(ANSIBLE) --check

install: DARGS?=
install: ## Installs everything via personal-computer.yml playbook
	@$(ANSIBLE)

all: ## Does most eveything with Ansible and Make targets
all: bootstrap bootstrap-check install

######################## Below is autogenerated  ##########################
# Run ./makefile_targets_from_ansible_tags.py, copy Makefile.template below
###########################################################################

bugfix:
bugfix: ## Runs the bugfix ansible role
	@$(ANSIBLE) --tags="bugfix"

codium:
codium: ## Runs the codium ansible role
	@$(ANSIBLE) --tags="codium"

codium-extensions:
codium-extensions: ## Runs the codium-extensions ansible role
	@$(ANSIBLE) --tags="codium-extensions"

codium-preferences:
codium-preferences: ## Runs the codium-preferences ansible role
	@$(ANSIBLE) --tags="codium-preferences"

debug:
debug: ## Runs the debug ansible role
	@$(ANSIBLE) --tags="debug"

desktop:
desktop: ## Runs the desktop ansible role
	@$(ANSIBLE) --tags="desktop"

dev:
dev: ## Runs the dev ansible role
	@$(ANSIBLE) --tags="dev-tools"

docker:
docker: ## Runs the docker ansible role
	@$(ANSIBLE) --tags="docker"

extra-packages:
extra-packages: ## Runs the extra-packages ansible role
	@$(ANSIBLE) --tags="extra-packages"

flameshot:
flameshot: ## Runs the flameshot ansible role
	@$(ANSIBLE) --tags="flameshot"

flatpak:
flatpak: ## Runs the flatpak ansible role
	@$(ANSIBLE) --tags="flatpak"

git:
git: ## Runs the git ansible role
	@$(ANSIBLE) --tags="git"

helm:
helm: ## Runs the helm ansible role
	@$(ANSIBLE) --tags="helm"

hyper:
hyper: ## Runs the hyper ansible role
	@$(ANSIBLE) --tags="hyper"

infra:
infra: ## Runs the infra ansible role
	@$(ANSIBLE) --tags="iac"

kind:
kind: ## Runs the kind ansible role
	@$(ANSIBLE) --tags="kind"

lens:
lens: ## Runs the lens ansible role
	@$(ANSIBLE) --tags="lens"

notion:
notion: ## Runs the notion ansible role
	@$(ANSIBLE) --tags="notion"

snap-uninstall:
snap-uninstall: ## Runs the snap-uninstall ansible role
	@$(ANSIBLE) --tags="snap-uninstall"

stacer:
stacer: ## Runs the stacer ansible role
	@$(ANSIBLE) --tags="stacer"

terraform:
terraform: ## Runs the terraform ansible role
	@$(ANSIBLE) --tags="terraform"

terminal:
terminal: ## Runs the terminal ansible role
	@$(ANSIBLE) --tags="terminal"

timeshift:
timeshift: ## Runs the timeshift ansible role
	@$(ANSIBLE) --tags="timeshift"

ulauncher:
ulauncher: ## Runs the ulauncher ansible role
	@$(ANSIBLE) --tags="ulauncher"

unused-packages:
unused-packages: ## Runs the unused-packages ansible role
	@$(ANSIBLE) --tags="unused-packages"

vscodium:
vscodium: ## Runs the vscodium ansible role
	@$(ANSIBLE) --tags="vscodium"

whatsdesk:
whatsdesk: ## Runs the whatsdesk ansible role
	@$(ANSIBLE) --tags="whatsdesk"

wifi-powersave-mode:
wifi-powersave-mode: ## Runs the wifi-powersave-mode ansible role
	@$(ANSIBLE) --tags="wifi-powersave-mode"

zsh:
zsh: ## Runs the zsh ansible role
	@$(ANSIBLE) --tags="zsh"
